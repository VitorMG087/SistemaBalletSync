@page "/mensalidades"
@inject RecebimentoService RecebimentoService
@inject IJSRuntime JSRuntime
@using System.IdentityModel.Tokens.Jwt

<PageTitle>Mensalidades - BalletSync</PageTitle>

<h3>Mensalidades</h3>

<div class="row mb-3">
    <div class="col-2">
        <label>Mês:</label>
        <InputSelect @bind-Value="mesSelecionado" class="form-control">
            @for (int i = 1; i <= 12; i++)
            {
                <option value="@i">@i.ToString("D2")</option>
            }
        </InputSelect>
    </div>
    <div class="col-2">
        <label>Ano:</label>
        <InputNumber @bind-Value="anoSelecionado" class="form-control" />
    </div>
    <div class="col-2 align-self-end">
        <button class="btn btn-primary" @onclick="CarregarMensalidades">Carregar</button>
    </div>
</div>

@if (mensalidades == null)
{
    <p><em>Carregando...</em></p>
}
else if (!mensalidades.Any())
{
    <p>Nenhuma mensalidade encontrada para o período selecionado.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Aluno</th>
                <th>Valor</th>
                <th>Vencimento</th>
                <th>Pago?</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var m in mensalidades)
            {
                <tr>
                    <td>@m.NomeAluno</td>
                    <td>@m.Valor.ToString("C")</td>
                    <td>@m.DataVencimento.ToString("dd/MM/yyyy")</td>
                    <td>@(m.EstaPago ? "Sim" : "Não")</td>
                    <td>
                        @if (m.EstaPago)
                        {
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmarExcluirRecebimento(m)">Excluir Pagamento</button>
                        }
                        else
                        {
                            <span>-</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Mensalidade> mensalidades;
    private int mesSelecionado = DateTime.Today.Month;
    private int anoSelecionado = DateTime.Today.Year;
    private string? token;
    private bool _tokenVerificado = false;

    protected override async Task OnInitializedAsync()
    {
        await CarregarMensalidades();
    }

    private async Task CarregarMensalidades()
    {
        mensalidades = await RecebimentoService.GetMensalidadesPorMesEAnoAsync(mesSelecionado, anoSelecionado);
    }

    private async Task ConfirmarExcluirRecebimento(Mensalidade mensalidade)
    {
        bool confirmado = await JSRuntime.InvokeAsync<bool>("confirm", $"Deseja excluir o pagamento da mensalidade de {mensalidade.NomeAluno}?");

        if (confirmado)
        {
            try
            {
                
                var todosRecebimentos = await RecebimentoService.GetRecebimentosPorMesEAnoAsync(mesSelecionado, anoSelecionado);
                var recebimento = todosRecebimentos.FirstOrDefault(r =>
                    r.Categoria == "Mensalidade" &&
                    r.Descricao == $"Mensalidade - {mensalidade.NomeAluno}" &&
                    r.Valor == mensalidade.Valor
                );

                if (recebimento != null)
                {
                    await RecebimentoService.DeleteRecebimento(recebimento.Id);
                    await CarregarMensalidades();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Recebimento correspondente não encontrado.");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Erro ao excluir recebimento: {ex.Message}");
            }
        }
    }
   
}
