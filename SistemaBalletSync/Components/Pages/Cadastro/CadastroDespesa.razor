@page "/despesas/novo"
@page "/despesas/editar/{idDespesa:int}"
@inject DespesaService DespesaService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject LogService LogService
@inject SessaoUsuario SessaoUsuario
@using SistemaBalletSync.Services
@using System.IdentityModel.Tokens.Jwt


<PageTitle>Despesas - BalletSync</PageTitle>

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">@((idDespesa == null) ? "Cadastrar" : "Editar") Despesa</h4>
            </div>
            <div class="card-body">
                <EditForm Model="DespesaModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Descrição<span class="text-danger">*</span></label>
                        <InputText class="form-control" @bind-Value="DespesaModel.Descricao" />
                        <ValidationMessage For="@(() => DespesaModel.Descricao)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Valor<span class="text-danger">*</span></label>
                        <InputNumber class="form-control" @bind-Value="DespesaModel.Valor" />
                        <ValidationMessage For="@(() => DespesaModel.Valor)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Data<span class="text-danger">*</span></label>
                        <InputDate class="form-control" @bind-Value="DespesaModel.Data" />
                        <ValidationMessage For="@(() => DespesaModel.Data)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Categoria</label>
                        <InputText class="form-control" @bind-Value="DespesaModel.Categoria" />
                    </div>

                    <div class="d-flex justify-content-between">
                        <button class="btn btn-secondary" type="button" @onclick="Voltar">Voltar</button>
                        <button class="btn btn-primary" type="submit">Salvar</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private Despesa DespesaModel = new();
    [Parameter] public int? idDespesa { get; set; }
    private string? token;
    private bool _tokenVerificado = false;

    protected override async Task OnInitializedAsync()
    {
        if (idDespesa.HasValue)
        {
            DespesaModel = await DespesaService.GetDespesaByIdAsync(idDespesa.Value) ?? new Despesa();
        }
        else
        {
            DespesaModel = new Despesa
                {
                    Data = DateTime.Today 
                };
        }
            }
        

    private async Task HandleValidSubmit()
    {
        var nomeUsuario = SessaoUsuario.Usuario?.Nome ?? "O Usuario Logado";

        try
        {
            if (idDespesa == null)
            {
                await DespesaService.AddDespesaAsync(DespesaModel);
                await LogService.RegistrarLogAsync(nomeUsuario, "Cadastro de Despesa", $"Descrição: {DespesaModel.Descricao}, Valor: R$ {DespesaModel.Valor}");
            }
            else
            {
                
                await DespesaService.UpdateDespesaAsync(DespesaModel, idDespesa.Value);
                await LogService.RegistrarLogAsync(nomeUsuario, "Edição de Despesa", $"ID: {idDespesa.Value}, Nova descrição: {DespesaModel.Descricao}, Valor: R$ {DespesaModel.Valor}");
            }

            Navigation.NavigateTo("/despesas");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Erro ao salvar: {ex.Message}");
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            token = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "authToken");
            if (string.IsNullOrEmpty(token) || TokenExpirado(token))
            {
                await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", "authToken");
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                _tokenVerificado = true;
                StateHasChanged();
            }
        }
    }

    private bool TokenExpirado(string jwtToken)
    {
        try
        {
            var handler = new JwtSecurityTokenHandler();
            var token = handler.ReadJwtToken(jwtToken);
            var exp = token.Payload.Exp;
            if (exp == null) return true;
            var expDate = DateTimeOffset.FromUnixTimeSeconds(Convert.ToInt64(exp));
            return expDate.UtcDateTime <= DateTime.UtcNow;
        }
        catch
        {
            return true;
        }
    }

    private void Voltar()
    {
        Navigation.NavigateTo("/despesas", true);
    }
}
