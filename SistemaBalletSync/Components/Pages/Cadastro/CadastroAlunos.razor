@page "/alunos/novo"
@page "/alunos/editar/{idAluno}"
@inject AlunoService AlunoService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject PlanoService PlanoService


<PageTitle>Alunos - BalletSync</PageTitle>

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">
                    @(string.IsNullOrEmpty(idAluno) ? "Cadastrar" : "Editar") Aluno
                </h4>
            </div>
            <div class="card-body">
                <EditForm Model="AlunoModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
           
                    <div class="row">
                        <div class="col-xxl-3 col-md-6">
                            <label class="form-label">Nome Completo<span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="AlunoModel.Nome" />
                            <ValidationMessage For="@(() => AlunoModel.Nome)" />
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <label class="form-label">CPF<span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="AlunoModel.CPF" />
                            <ValidationMessage For="@(() => AlunoModel.CPF)" />
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <label class="form-label">Telefone<span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="AlunoModel.Telefone" />
                            <ValidationMessage For="@(() => AlunoModel.Telefone)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xxl-3 col-md-6">
                            <label class="form-label">CEP<span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="AlunoModel.Cep" />
                            <ValidationMessage For="@(() => AlunoModel.Cep)" />
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <label class="form-label">Estado<span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="AlunoModel.Estado" />
                            <ValidationMessage For="@(() => AlunoModel.Estado)" />
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <label class="form-label">Cidade<span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="AlunoModel.Cidade" />
                            <ValidationMessage For="@(() => AlunoModel.Cidade)" />
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <label class="form-label">Bairro</label>
                            <InputText class="form-control" @bind-Value="AlunoModel.Bairro" />
                        </div>
                        <div class="col-xxl-6 col-md-6">
                            <label class="form-label">Endereço<span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="AlunoModel.Endereco" />
                            <ValidationMessage For="@(() => AlunoModel.Endereco)" />
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <label class="form-label">Complemento</label>
                            <InputText class="form-control" @bind-Value="AlunoModel.Complemento" />
                        </div>

                        <div class="col-xxl-3 col-md-6">
                            <label class="form-label">Plano<span class="text-danger">*</span></label>
                            <InputSelect class="form-control" @bind-Value="AlunoModel.IdPlano">
                                <option value="0">Selecione um plano...</option>
                                @foreach (var plano in Planos)
                                {
                                    <option value="@plano.Id">@plano.Nome - R$ @plano.Valor</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => AlunoModel.IdPlano)" />
                        </div>
                        <div class="col-xxl-3 col-md-6">
                            <label class="form-label">Status do Aluno</label>
                            <InputRadioGroup @bind-Value="AlunoModel.Ativo" class="form-check">
                                <div class="form-check">
                                    <InputRadio class="form-check-input" Value="true" id="ativo" />
                                    <label class="form-check-label" for="ativo">Ativo</label>
                                </div>
                                <div class="form-check">
                                    <InputRadio class="form-check-input" Value="false" id="inativo" />
                                    <label class="form-check-label" for="inativo">Inativo</label>
                                </div>
                            </InputRadioGroup>
                        </div>

                    </div>                                                            
                      
                    <div class="row mt-3">
                        <div class="d-flex justify-content-between">
                            <button class="btn btn-secondary" type="button" @onclick="Voltar">Voltar</button>
                            <button class="btn btn-primary" type="submit">Salvar</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Plano> Planos = new();
    private Aluno AlunoModel = new Aluno();

    [Parameter]
    public string idAluno { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Planos = await AlunoService.GetPlanosAsync();
        if (!string.IsNullOrEmpty(idAluno))
        {
            int id = int.Parse(idAluno);
            var alunoExistente = await AlunoService.GetAlunoByIdAsync(id);
            if (alunoExistente != null)
            {
                AlunoModel = alunoExistente;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Aluno não encontrado.");
                Navigation.NavigateTo("/alunos");
            }
        }

    }

    private async Task HandleValidSubmit()

    {

        try
        {
            if (string.IsNullOrEmpty(idAluno))
                await AlunoService.AddAlunoAsync(AlunoModel);
            else
                await AlunoService.UpdateAlunoAsync(AlunoModel, idAluno);

            Navigation.NavigateTo("/alunos");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Ocorreu um erro ao salvar o aluno: {ex.Message}");
        }

        if (string.IsNullOrEmpty(idAluno))
            await AlunoService.AddAlunoAsync(AlunoModel);
        else
            await AlunoService.UpdateAlunoAsync(AlunoModel, idAluno);

        Navigation.NavigateTo("/alunos");
    }

   

    private void Voltar() => Navigation.NavigateTo("/alunos");

    
    
}
