@page "/professores/novo"
@page "/professores/editar/{idProfessor}"
@inject ProfessorService ProfessorService
@inject NavigationManager Navigation
@inject LogService LogService
@inject SessaoUsuario SessaoUsuario
@inject ViaCepService ViaCepService
@inject IJSRuntime JSRuntime
@using SistemaBalletSync.Services

<PageTitle>Professores - BalletSync</PageTitle>

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">@(string.IsNullOrEmpty(idProfessor) ? "Cadastrar" : "Editar") Professor</h4>
            </div>
            <div class="card-body">
                <EditForm Model="ProfessorModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row">
                        <div class="col-xxl-3 col-md-6">
                            <label class="form-label">Nome Completo<span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="ProfessorModel.Nome" />
                            <small class="text-danger">@((exibeMensagemObrigatorio && string.IsNullOrEmpty(ProfessorModel.Nome)) ? "Campo Obrigatório" : "")</small>
                        </div>

                        <div class="col-xxl-3 col-md-6">
                            <label class="form-label">CPF<span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="ProfessorModel.CPF" />
                            <small class="text-danger">@((exibeMensagemObrigatorio && string.IsNullOrEmpty(ProfessorModel.CPF)) ? "Campo Obrigatório" : "")</small>
                        </div>

                        <div class="col-xxl-3 col-md-6">
                            <label class="form-label">Telefone para Contato<span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="ProfessorModel.Telefone" />
                            <small class="text-danger">@((exibeMensagemObrigatorio && string.IsNullOrEmpty(ProfessorModel.Telefone)) ? "Campo Obrigatório" : "")</small>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-xxl-3 col-md-6">
                            <label class="form-label">CEP<span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="ProfessorModel.Cep" @onblur="BuscarEnderecoPorCep" />
                            <small class="text-danger">@((exibeMensagemObrigatorio && string.IsNullOrEmpty(ProfessorModel.Cep)) ? "Campo Obrigatório" : "")</small>
                        </div>

                        <div class="col-xxl-3 col-md-6">
                            <label class="form-label">Estado<span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="ProfessorModel.Estado" />
                            <small class="text-danger">@((exibeMensagemObrigatorio && string.IsNullOrEmpty(ProfessorModel.Estado)) ? "Campo Obrigatório" : "")</small>
                        </div>

                        <div class="col-xxl-3 col-md-6">
                            <label class="form-label">Cidade<span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="ProfessorModel.Cidade" />
                            <small class="text-danger">@((exibeMensagemObrigatorio && string.IsNullOrEmpty(ProfessorModel.Cidade)) ? "Campo Obrigatório" : "")</small>
                        </div>

                        <div class="col-xxl-3 col-md-6">
                            <label class="form-label">Bairro</label>
                            <InputText class="form-control" @bind-Value="ProfessorModel.Bairro" />
                        </div>

                        <div class="col-xxl-6 col-md-6">
                            <label class="form-label">Endereço<span class="text-danger">*</span></label>
                            <InputText class="form-control" @bind-Value="ProfessorModel.Endereco" />
                            <small class="text-danger">@((exibeMensagemObrigatorio && string.IsNullOrEmpty(ProfessorModel.Endereco)) ? "Campo Obrigatório" : "")</small>
                        </div>

                        <div class="col-xxl-3 col-md-6">
                            <label class="form-label">Complemento</label>
                            <InputText class="form-control" @bind-Value="ProfessorModel.Complemento" />
                        </div>
                    </div>

                    <div class="row mt-3">
                        <div class="d-flex justify-content-between">
                            <button class="btn btn-secondary" type="button" @onclick="Voltar">Voltar</button>
                            <button class="btn btn-primary" type="submit">Salvar</button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private Professor ProfessorModel = new();
    [Parameter] public string idProfessor { get; set; } = string.Empty;
    private bool exibeMensagemObrigatorio;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(idProfessor))
        {
            ProfessorModel = await ProfessorService.GetProfessorByIdAsync(idProfessor);
        }
    }

    private async Task HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(ProfessorModel.Nome) || string.IsNullOrEmpty(ProfessorModel.Telefone) ||
            string.IsNullOrEmpty(ProfessorModel.CPF) || string.IsNullOrEmpty(ProfessorModel.Endereco) ||
            string.IsNullOrEmpty(ProfessorModel.Estado) || string.IsNullOrEmpty(ProfessorModel.Cidade))
        {
            exibeMensagemObrigatorio = true;
            return;
        }

        string acao;
        string detalhe;

        if (string.IsNullOrEmpty(idProfessor))
        {
            await ProfessorService.AddProfessorAsync(ProfessorModel);
            acao = "Cadastro de Professor";
            detalhe = $"Professor cadastrado: {ProfessorModel.Nome}";
        }
        else
        {
            await ProfessorService.UpdateProfessorAsync(ProfessorModel, idProfessor);
            acao = "Edição de Professor";
            detalhe = $"Professor editado: {ProfessorModel.Nome} (ID: {idProfessor})";
        }

        
        var usuario = SessaoUsuario.Usuario?.Nome ?? "O Usuario Logado";
        await LogService.RegistrarLogAsync(usuario, acao, detalhe);

        ProfessorModel = new Professor();
        Navigation.NavigateTo("/professores");
    }
    private async Task BuscarEnderecoPorCep()
    {
        if (string.IsNullOrWhiteSpace(ProfessorModel.Cep))
            return;

        var endereco = await ViaCepService.BuscarEnderecoPorCep(ProfessorModel.Cep);

        if (endereco != null)
        {
            ProfessorModel.Estado = endereco.Uf;
            ProfessorModel.Cidade = endereco.Localidade;
            ProfessorModel.Bairro = endereco.Bairro;
            ProfessorModel.Endereco = endereco.Logradouro;
            ProfessorModel.Complemento ??= endereco.Complemento;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "CEP inválido ou não encontrado.");
        }
    }


    private void Voltar()
    {
        Navigation.NavigateTo("/professores", true);
    }
}
