@page "/"
@layout SistemaBalletSync.Components.Layout.LoginPage
@inject NavigationManager Navigation
@inject UsuarioService UsuarioService
@inject SessaoUsuario SessaoUsuario
@inject IJSRuntime JS
@inject LogService LogService
@using SistemaBalletSync.Services


<PageTitle>Login - BalletSync</PageTitle>

<div class="container d-flex justify-content-center align-items-center vh-100">
    <div class="card p-4 shadow rounded-4" style="width: 350px; background: linear-gradient(to bottom right, #d8c1f6, #f5e6ff);">
        <div class="text-center mb-3">
            <img src="/img/logo-ballet.png" alt="Logo" height="60" />
            <h5 class="mt-2 text-dark">Bem-vindo ao BalletSync</h5>
        </div>

        <EditForm Model="@usuario" OnValidSubmit="AutenticarUsuario">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-2">
                <label class="form-label">Nome de usuário</label>
                <InputText @bind-Value="usuario.Nome" class="form-control" />
            </div>

            <div class="mb-3">
                <label class="form-label">Senha</label>
                <InputText @bind-Value="usuario.Senha" type="password" class="form-control" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Entrar</button>

            @if (!string.IsNullOrEmpty(mensagemErro))
            {
                <div class="alert alert-danger mt-3">@mensagemErro</div>
            }
        </EditForm>
    </div>
</div>

@code {
    private Usuario usuario = new();
    private string mensagemErro;

    private async Task AutenticarUsuario()
    {
        mensagemErro = string.Empty;

        try
        {
            var usuarioValido = await UsuarioService.ValidarUsuarioAsync(usuario.Nome, usuario.Senha);

            if (usuarioValido != null)
            {
                var token = UsuarioService.GerarToken(usuarioValido);
                await JS.InvokeVoidAsync("sessionStorage.setItem", "authToken", token);
                SessaoUsuario.Logar(usuarioValido);

                await LogService.RegistrarLogAsync(usuarioValido.Nome, "Login", "Usuário autenticado com sucesso.");
                Navigation.NavigateTo("/inicio", forceLoad: true);
            }
            else
            {
                mensagemErro = "Nome de usuário ou senha inválidos.";
                await LogService.RegistrarLogAsync(usuario.Nome, "LoginFalha", "Credenciais inválidas.");
            }
        }
        catch (Exception ex)
        {
            mensagemErro = "Erro ao tentar autenticar: " + ex.Message;
            await LogService.RegistrarLogAsync(usuario.Nome, "LoginErro", ex.Message);
        }
    }
}
